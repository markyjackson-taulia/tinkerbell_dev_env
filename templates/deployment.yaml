{{- $name := .Values.postgres.name }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tink
  labels:
    k8s-app: tink
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  replicas: {{ .Values.tink.replicas | default "1" }}
  selector:
    matchLabels:
      k8s-app: tink
  template:
    metadata:
      labels:
        k8s-app: tink
    spec:
      initContainers:
        - name: tink-db-migrate
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          env:
            - name: ONLY_MIGRATION
              value: "true"
            - name: TINK_FACILITY
              value: "{{ .Values.location }}"
            - name: PGDATABASE
              value: 'tink-{{ .Values.env }}'
            - name: PGHOST
              value: 'psql-{{ $name }}'
            - name: PGSSLMODE
              value: '{{ .Values.global.env.PGSSLMODE }}'
            - name: PGUSER
              value: '{{ .Values.global.env.PGUSER }}'
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: tink-db
                  key: password
            - name: TINKERBELL_TLS_CERT
              valueFrom:
                secretKeyRef:
                  name: tink-grpc.{{ .Values.clusterFQDN }}
                  key: tls.crt
          envFrom:
            - secretRef:
                name: tink-env
          resources:
            requests:
              cpu: {{ .Values.tink.init.resources.cpu | default "1" }}
              memory: {{ .Values.tink.init.resources.memory | default "2Gi" }}
            limits:
              cpu: {{ .Values.tink.init.resources.cpu | default "1" }}
              memory: {{ .Values.tink.init.resources.memory | default "2Gi" }}
      containers:
        - name: tink
          env:
            - name: TINK_FACILITY
              value: "{{ .Values.location }}"
            - name: PACKET_ENV
              value: "{{ .Values.env }}"
            - name: PGDATABASE
              value: 'tink-{{ .Values.env }}'
            - name: PGHOST
              value: 'psql-{{ $name }}'
            - name: PGUSER
              value: '{{ .Values.global.env.PGUSER }}'
            - name: PGSSLMODE
              value: '{{ .Values.global.env.PGSSLMODE }}'
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: tink-db
                  key: password
            - name: TINKERBELL_TLS_CERT
              valueFrom:
                secretKeyRef:
                  name: tink-grpc.{{ .Values.clusterFQDN }}
                  key: tls.crt
          envFrom:
            - secretRef:
                name: tink-env
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 42113
              name: tink-grpc
              protocol: TCP
            - containerPort: 42114
              name: tink-cert
              protocol: TCP
          # livenessProbe:
          #   exec:
          #     command:
          #       - "wget -qO- 127.0.0.1:42114/cert"
          # initialDelaySeconds: 5
          # readinessProbe:
          #   exec:
          #     command:
          #       - "wget -qO- 127.0.0.1:42114/cert"
          # initialDelaySeconds: 5
          resources:
            requests:
              cpu: {{ .Values.tink.resources.cpu | default "1" }}
              memory: {{ .Values.tink.resources.memory | default "2Gi" }}
            limits:
              cpu: {{ .Values.tink.resources.cpu | default "1" }}
              memory: {{ .Values.tink.resources.memory | default "2Gi" }}
