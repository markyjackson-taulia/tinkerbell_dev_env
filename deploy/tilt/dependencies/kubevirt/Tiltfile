def deploy_kubevirt():
    # KubeVirt
    k8s_yaml('deploy/tilt/dependencies/kubevirt/kubevirt-operator.yaml')
    k8s_resource(
        workload='virt-operator',
        objects=[
            'kubevirt:namespace',
            'kubevirts.kubevirt.io:customresourcedefinition',
            'kubevirt-operator:serviceaccount',
            'kubevirt-operator:role',
            'kubevirt-operator:clusterrole',
            'kubevirt-operator-rolebinding:rolebinding',
            'kubevirt-operator:clusterrolebinding',
            'kubevirt-cluster-critical:priorityclass',
            'kubevirt.io\\:operator:clusterrole'
        ],
        resource_deps=['multus']
    )

    # TODO: try to detect if kvm/virtio are supported and skip this step if they are
    kubevirt_config = {
        'apiVersion': 'v1',
        'kind': 'ConfigMap',
        'metadata': {
            'name': 'kubevirt-config',
            'namespace': 'kubevirt'
        },
        'data': {
            'feature-gates': 'Macvtap'
            #'debug.useEmulation': 'true'
        }
    }
    k8s_yaml(encode_yaml(kubevirt_config))

    kubevirt_cr = {
        'apiVersion': 'kubevirt.io/v1alpha3',
        'kind': 'KubeVirt',
        'metadata': {
            'name': 'kubevirt',
            'namespace': 'kubevirt'
        },
        'spec': {
            'certificateRotateStrategy': {},
            'configuration': {},
            'customizeComponents': {},
            'imagePullPolicy': 'IfNotPresent',
        }
    }
    k8s_yaml(encode_yaml(kubevirt_cr))
    k8s_resource(
        new_name='kubevirt',
        objects=[
            'kubevirt:kubevirt',
            'kubevirt-config:configmap:kubevirt'
        ],
        resource_deps=['virt-operator']    
    )
